const mongoose = require("mongoose");
const softDelete = require("./plugins/softDelete");

const orderSchema = new mongoose.Schema(
  {
    // Ng∆∞·ªùi d√πng ƒë·∫∑t h√†ng
    user: {
      type: mongoose.Schema.Types.ObjectId,
      // üéØ S·ª¨A: D√πng t√™n model vi·∫øt th∆∞·ªùng (user)
      ref: "user",
      required: true,
    },

    // Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n
    items: [
      {
        product: {
          type: mongoose.Schema.Types.ObjectId,
          // üéØ S·ª¨A: D√πng t√™n model vi·∫øt th∆∞·ªùng (product)
          ref: "product",
          required: true,
        },
        quantity: { type: Number, required: true, min: 1 },
        price: { type: Number, required: true, min: 0 },
      },
    ],

    // T·ªïng ti·ªÅn tr∆∞·ªõc gi·∫£m gi√°
    totalAmount: { type: Number, required: true, min: 0 },

    // S·ªë ti·ªÅn gi·∫£m gi√°
    discountAmount: { type: Number, default: 0, min: 0 },

    // S·ªë ti·ªÅn th·ª±c thanh to√°n (sau gi·∫£m gi√°)
    finalAmount: { type: Number, required: true, min: 0 },

    // M√£ gi·∫£m gi√° √°p d·ª•ng (n·∫øu c√≥)
    coupon: {
      type: mongoose.Schema.Types.ObjectId,
      // üéØ S·ª¨A: D√πng t√™n model vi·∫øt th∆∞·ªùng (coupon)
      ref: "coupon",
      default: null,
    },

    // Tr·∫°ng th√°i ƒë∆°n h√†ng
    status: {
      type: String,
      enum: ["Pending", "Confirmed", "Shipping", "Delivered", "Cancelled"],
      default: "Pending",
    },

    // Ph∆∞∆°ng th·ª©c thanh to√°n
    paymentMethod: {
      type: String,
      enum: ["COD", "BANK", "MOMO", "ZALOPAY", "CARD"],
      required: true,
    },

    // Ghi ch√∫ th√™m (n·∫øu c·∫ßn)
    note: { type: String, trim: true },
  },
  {
    timestamps: true,
  }
);

orderSchema.plugin(softDelete);
orderSchema.index({ user: 1, status: 1, createdAt: -1 });

// üéØ S·ª¨A: Export t√™n model th√†nh "order" (ch·ªØ th∆∞·ªùng) ƒë·ªÉ th·ªëng nh·∫•t
module.exports = mongoose.model("order", orderSchema);
