var express = require("express");
var router = express.Router();
let roles = require("../schemas/role");
let { Authentication, Authorization } = require("../utils/authMiddleware");
let { Response } = require("../utils/responseHandler");

// =============================
// üîπ L·∫•y t·∫•t c·∫£ role (ch·ªâ ADMIN)
// =============================
router.get("/", Authentication, Authorization("ADMIN"), async (req, res) => {
  try {
    let allRoles = await roles.find({ isDeleted: false });
    Response(res, 200, true, allRoles);
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ L·∫•y role theo ID (ch·ªâ ADMIN)
// =============================
router.get("/:id", Authentication, Authorization("ADMIN"), async (req, res) => {
  try {
    let role = await roles.findById(req.params.id);
    if (!role || role.isDeleted)
      return Response(res, 404, false, "Role kh√¥ng t·ªìn t·∫°i");
    Response(res, 200, true, role);
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ T·∫°o role m·ªõi (ch·ªâ ADMIN)
// =============================
router.post("/", Authentication, Authorization("ADMIN"), async (req, res) => {
  try {
    let { name, permissions } = req.body;
    if (!name) return Response(res, 400, false, "Thi·∫øu t√™n role");

    let exist = await roles.findOne({ name });
    if (exist) return Response(res, 400, false, "Role ƒë√£ t·ªìn t·∫°i");

    let newRole = new roles({ name, permissions });
    await newRole.save();

    Response(res, 201, true, "T·∫°o role th√†nh c√¥ng");
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ X√≥a m·ªÅm role (ch·ªâ ADMIN)
// =============================
router.delete(
  "/:id",
  Authentication,
  Authorization("ADMIN"),
  async (req, res) => {
    try {
      let role = await roles.findById(req.params.id);
      if (!role) return Response(res, 404, false, "Kh√¥ng t√¨m th·∫•y role");

      await role.softDelete();
      Response(res, 200, true, "X√≥a m·ªÅm role th√†nh c√¥ng");
    } catch (error) {
      Response(res, 500, false, error.message);
    }
  }
);

module.exports = router;
