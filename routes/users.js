var express = require("express");
var router = express.Router();
let users = require("../schemas/user");
let roles = require("../schemas/role");
let bcrypt = require("bcrypt");
let { Authentication, Authorization } = require("../utils/authMiddleware");
let { Response } = require("../utils/responseHandler");

// =============================
// üîπ L·∫•y danh s√°ch t·∫•t c·∫£ user (ch·ªâ ADMIN)
// =============================
router.get("/", Authentication, Authorization("ADMIN"), async (req, res) => {
  try {
    let allUsers = await users
      .find({ isDeleted: false })
      .populate({ path: "role", select: "name" });
    Response(res, 200, true, allUsers);
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ L·∫•y th√¥ng tin chi ti·∫øt user theo ID (ADMIN ho·∫∑c ch√≠nh user ƒë√≥)
// =============================
router.get("/:id", Authentication, async (req, res) => {
  try {
    let user = await users.findById(req.params.id).populate("role");
    if (!user || user.isDeleted)
      return Response(res, 404, false, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    // Ch·ªâ cho ph√©p ADMIN ho·∫∑c ch√≠nh user ƒë√≥ xem th√¥ng tin
    if (req.userId !== user._id.toString() && req.userRole !== "ADMIN") {
      return Response(res, 403, false, "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin n√†y");
    }

    Response(res, 200, true, user);
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ T·∫°o m·ªõi user (ADMIN ho·∫∑c SELLER)
// =============================
router.post(
  "/",
  Authentication,
  Authorization("ADMIN", "SELLER"),
  async (req, res) => {
    try {
      let { username, email, password, fullName, role } = req.body;
      if (!username || !email || !password)
        return Response(res, 400, false, "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc");

      // Ki·ªÉm tra tr√πng username/email
      let exists = await users.findOne({ $or: [{ username }, { email }] });
      if (exists) return Response(res, 400, false, "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i");

      let foundRole = await roles.findOne({ name: role || "USER" });
      if (!foundRole) return Response(res, 400, false, "Role kh√¥ng h·ª£p l·ªá");

      // M√£ h√≥a m·∫≠t kh·∫©u
      let hash = bcrypt.hashSync(password, 10);

      let newUser = new users({
        username,
        email,
        password: hash,
        fullName,
        role: foundRole._id,
      });

      await newUser.save();
      Response(res, 201, true, "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng");
    } catch (error) {
      Response(res, 500, false, error.message);
    }
  }
);

// =============================
// üîπ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (ADMIN ho·∫∑c ch√≠nh user ƒë√≥)
// =============================
router.put("/:id", Authentication, async (req, res) => {
  try {
    let user = await users.findById(req.params.id);
    if (!user || user.isDeleted)
      return Response(res, 404, false, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    // Ch·ªâ cho ph√©p ADMIN ho·∫∑c ch√≠nh user ƒë√≥ c·∫≠p nh·∫≠t
    if (req.userId !== user._id.toString() && req.userRole !== "ADMIN") {
      return Response(
        res,
        403,
        false,
        "B·∫°n kh√¥ng th·ªÉ s·ª≠a th√¥ng tin ng∆∞·ªùi kh√°c"
      );
    }

    user.email = req.body.email || user.email;
    user.fullName = req.body.fullName || user.fullName;

    if (req.body.password) {
      let salt = bcrypt.genSaltSync(10);
      user.password = bcrypt.hashSync(req.body.password, salt);
    }

    await user.save();
    Response(res, 200, true, "C·∫≠p nh·∫≠t th√†nh c√¥ng");
  } catch (error) {
    Response(res, 500, false, error.message);
  }
});

// =============================
// üîπ X√≥a m·ªÅm ng∆∞·ªùi d√πng (ch·ªâ ADMIN)
// =============================
router.delete(
  "/:id",
  Authentication,
  Authorization("ADMIN"),
  async (req, res) => {
    try {
      let user = await users.findById(req.params.id);
      if (!user) return Response(res, 404, false, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      await user.softDelete();
      Response(res, 200, true, "X√≥a m·ªÅm ng∆∞·ªùi d√πng th√†nh c√¥ng");
    } catch (error) {
      Response(res, 500, false, error.message);
    }
  }
);

// =============================
// üîπ Kh√¥i ph·ª•c ng∆∞·ªùi d√πng (ch·ªâ ADMIN)
// =============================
router.post(
  "/restore/:id",
  Authentication,
  Authorization("ADMIN"),
  async (req, res) => {
    try {
      let user = await users.findById(req.params.id, { includeDeleted: true });
      if (!user) return Response(res, 404, false, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      await user.restore();
      Response(res, 200, true, "Kh√¥i ph·ª•c ng∆∞·ªùi d√πng th√†nh c√¥ng");
    } catch (error) {
      Response(res, 500, false, error.message);
    }
  }
);

module.exports = router;
