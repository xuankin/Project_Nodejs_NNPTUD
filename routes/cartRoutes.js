// routes/cartRoutes.js
const express = require("express");
const router = express.Router();
const Cart = require("../schemas/cart");
const { Authentication, Authorization } = require("../utils/authMiddleware");
const { Response } = require("../utils/responseHandler");

// L·∫§Y GI·ªé H√ÄNG
router.get("/me", Authentication, Authorization("USER"), async (req, res) => {
  try {
    const cart = await Cart.findOne({ user: req.userId }).populate(
      "items.product"
    );
    Response(res, 200, true, cart || { items: [], totalAmount: 0 });
  } catch (err) {
    Response(res, 500, false, err.message);
  }
});

// TH√äM V√ÄO GI·ªé ‚Äì TƒÇNG S·ªê L∆Ø·ª¢NG N·∫æU ƒê√É C√ì
router.post("/", Authentication, Authorization("USER"), async (req, res) => {
  try {
    const { product, quantity = 1 } = req.body;
    let cart = await Cart.findOne({ user: req.userId });
    if (!cart) cart = new Cart({ user: req.userId, items: [] });

    // üéØ CH·ªàNH S·ª¨A: Th√™m ki·ªÉm tra i.product tr∆∞·ªõc khi g·ªçi .toString()
    // Gi√∫p tr√°nh l·ªói 500 n·∫øu c√≥ s·∫£n ph·∫©m b·ªã x√≥a m√† v·∫´n c√≤n trong gi·ªè
    const existing = cart.items.find(
      (i) => i.product && i.product.toString() === product
    );

    if (existing) {
      existing.quantity += quantity;
    } else {
      cart.items.push({ product, quantity });
    }

    await cart.save();
    Response(res, 200, true, "Th√™m v√†o gi·ªè th√†nh c√¥ng");
  } catch (err) {
    Response(res, 500, false, err.message);
  }
});

// X√ìA KH·ªéI GI·ªé
router.delete(
  "/:productId",
  Authentication,
  Authorization("USER"),
  async (req, res) => {
    try {
      const cart = await Cart.findOne({ user: req.userId });
      if (!cart) return Response(res, 404, false, "Ch∆∞a c√≥ gi·ªè");

      cart.items = cart.items.filter(
        // üéØ CH·ªàNH S·ª¨A: Th√™m ki·ªÉm tra i.product tr∆∞·ªõc khi g·ªçi .toString()
        (i) => i.product && i.product.toString() !== req.params.productId
      );
      await cart.save();
      Response(res, 200, true, "X√≥a kh·ªèi gi·ªè th√†nh c√¥ng");
    } catch (err) {
      Response(res, 500, false, err.message);
    }
  }
);

module.exports = router;
